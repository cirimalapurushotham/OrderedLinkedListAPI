
public class Node<T> {
    T data;
    Node<T> next;

    public Node(T data) {
        this.data = data;
        this.next = null;
    }
}

// LinkedList Implementation
public class LinkedList<T> {
    Node<T> head;

    public void add(T data) {
        Node<T> newNode = new Node<>(data);
        newNode.next = head;
        head = newNode;
    }

    public void append(T data) {
        Node<T> newNode = new Node<>(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node<T> temp = head;
        while (temp.next != null) {
            temp = temp.next;
        }
        temp.next = newNode;
    }

    public T pop() {
        if (head == null) return null;
        T data = head.data;
        head = head.next;
        return data;
    }

    public T peek() {
        return head != null ? head.data : null;
    }

    public void printList() {
        Node<T> temp = head;
        while (temp != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.println("null");
    }
}

// Stack using LinkedList
class Stack<T> {
    LinkedList<T> list = new LinkedList<>();

    public void push(T data) {
        list.add(data);
    }

    public T pop() {
        return list.pop();
    }

    public T peek() {
        return list.peek();
    }

    public boolean isEmpty() {
        return list.head == null;
    }

    public void printStack() {
        list.printList();
    }
}

// Queue using LinkedList
class Queue<T> {
    LinkedList<T> list = new LinkedList<>();

    public void enqueue(T data) {
        list.append(data);
    }

    public T dequeue() {
        return list.pop();
    }

    public void printQueue() {
        list.printList();
    }
}

// Sample UseCases for testing the logic
public class LinkedListTest {
    public static void main(String[] args) {
        // Stack UC1
        Stack<Integer> stack = new Stack<>();
        stack.push(70);
        stack.push(30);
        stack.push(56);
        System.out.print("Stack after push: ");
        stack.printStack(); // Output: 56 -> 30 -> 70

        // Stack UC2
        System.out.print("Stack pop sequence: ");
        while (!stack.isEmpty()) {
            System.out.print(stack.pop() + " -> ");
        }
        System.out.println("null");

        // Queue UC3
        Queue<Integer> queue = new Queue<>();
        queue.enqueue(56);
        queue.enqueue(30);
        queue.enqueue(70);
        System.out.print("Queue after enqueue: ");
        queue.printQueue(); // Output: 56 -> 30 -> 70

        // Queue UC4
        System.out.print("Queue dequeue sequence: ");
        System.out.print(queue.dequeue() + " -> ");
        System.out.print(queue.dequeue() + " -> ");
        System.out.print(queue.dequeue() + " -> ");
        System.out.println("null");
    }
}
