// Base Node Class
public class Node<T> {
    T data;
    Node<T> next;

    public Node(T data) {
        this.data = data;
        this.next = null;
    }
}

// LinkedList Implementation
public class LinkedList<T> {
    Node<T> head;

    public void add(T data) {
        Node<T> newNode = new Node<>(data);
        newNode.next = head;
        head = newNode;
    }

    public void append(T data) {
        Node<T> newNode = new Node<>(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node<T> temp = head;
        while (temp.next != null) {
            temp = temp.next;
        }
        temp.next = newNode;
    }

    public void insertAfter(T prevData, T newData) {
        Node<T> temp = head;
        while (temp != null && !temp.data.equals(prevData)) {
            temp = temp.next;
        }
        if (temp != null) {
            Node<T> newNode = new Node<>(newData);
            newNode.next = temp.next;
            temp.next = newNode;
        }
    }

    public T pop() {
        if (head == null) return null;
        T data = head.data;
        head = head.next;
        return data;
    }

    public T popLast() {
        if (head == null || head.next == null) {
            T data = head != null ? head.data : null;
            head = null;
            return data;
        }
        Node<T> temp = head;
        while (temp.next.next != null) {
            temp = temp.next;
        }
        T data = temp.next.data;
        temp.next = null;
        return data;
    }

    public boolean search(T key) {
        Node<T> temp = head;
        while (temp != null) {
            if (temp.data.equals(key)) return true;
            temp = temp.next;
        }
        return false;
    }

    public void delete(T key) {
        if (head == null) return;
        if (head.data.equals(key)) {
            head = head.next;
            return;
        }
        Node<T> temp = head;
        while (temp.next != null && !temp.next.data.equals(key)) {
            temp = temp.next;
        }
        if (temp.next != null) {
            temp.next = temp.next.next;
        }
    }

    public int size() {
        int count = 0;
        Node<T> temp = head;
        while (temp != null) {
            count++;
            temp = temp.next;
        }
        return count;
    }

    public void printList() {
        Node<T> temp = head;
        while (temp != null) {
            System.out.print(temp.data + " -> ");
            temp = temp.next;
        }
        System.out.println("null");
    }
}

// Sorted LinkedList Implementation
public class SortedLinkedList<T extends Comparable<T>> extends LinkedList<T> {
    public void add(T data) {
        Node<T> newNode = new Node<>(data);
        if (head == null || head.data.compareTo(data) > 0) {
            newNode.next = head;
            head = newNode;
        } else {
            Node<T> temp = head;
            while (temp.next != null && temp.next.data.compareTo(data) < 0) {
                temp = temp.next;
            }
            newNode.next = temp.next;
            temp.next = newNode;
        }
    }
}

// Sample UseCases for testing the logic
public class LinkedListTest {
    public static void main(String[] args) {
        LinkedList<Integer> list = new LinkedList<>();
        list.add(70);
        list.add(30);
        list.add(56);
        list.printList(); // UC2: 56->30->70

        list = new LinkedList<>();
        list.append(56);
        list.append(30);
        list.append(70);
        list.printList(); // UC3: 56->30->70

        list.insertAfter(56, 30);
        list.printList(); // UC4

        list.pop();
        list.printList(); // UC5

        list.append(70); list.append(80);
        list.popLast();
        list.printList(); // UC6

        System.out.println("Search 30: " + list.search(30)); // UC7

        list.insertAfter(30, 40);
        list.printList(); // UC8

        list.delete(40);
        list.printList();
        System.out.println("Size: " + list.size()); // UC9

        SortedLinkedList<Integer> sortedList = new SortedLinkedList<>();
        sortedList.add(56);
        sortedList.add(30);
        sortedList.add(40);
        sortedList.add(70);
        sortedList.printList(); // UC10: 30->40->56->70
    }
}
